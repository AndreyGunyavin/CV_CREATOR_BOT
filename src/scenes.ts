// –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –ø–æ –¢–ó

import { Scenes, Markup } from "telegraf";
import { BotContext } from "./bot.context";
import {
  PAYMENT_INFO,
  ADMIN_CHAT_ID,
  PRICE_EXAMPLE,
  PRICE_EXAMPLE_VIDEO,
  PRICE_REVIEW,
  PRICE_REVIEW_EXAMPLES,
  PRICE_FULL_JUNIOR,
  PRICE_FULL_PRO,
  PRICE_FULL_LEAD,
  PRICE_UPSELL_VIDEO,
  PRICE_UPSELL_EXAMPLES,
} from "./constants";
import {
  isValidEmail,
  isValidImageFile,
  isValidResumeFile,
  generateOrderId,
  isCommand,
  isEmptyText,
  isTooLongText,
  isFileTooLarge,
  isSkipButton,
} from "./utils";
import { sendAdminEmail } from "./email";
import { orders } from "./index";
import { Order } from "./types";
import { MESSAGES } from "./messages";

export const mainMenuScene = new Scenes.BaseScene<BotContext>("mainMenu");

mainMenuScene.enter((ctx) => {
  ctx.reply(
    MESSAGES.mainMenu,
    { ...Markup.keyboard([
      [MESSAGES.buttons.exampleResume],
      [MESSAGES.buttons.reviewResume],
      [MESSAGES.buttons.fullResume],
      [MESSAGES.buttons.exit],
    ]).resize(), parse_mode: 'HTML' }
  );
});

mainMenuScene.hears(MESSAGES.buttons.exampleResume, (ctx) =>
  ctx.scene.enter("exampleScene"),
);
mainMenuScene.hears(MESSAGES.buttons.reviewResume, (ctx) =>
  ctx.scene.enter("reviewScene"),
);
mainMenuScene.hears(MESSAGES.buttons.fullResume, (ctx) =>
  ctx.scene.enter("fullResumeScene"),
);
mainMenuScene.hears(MESSAGES.buttons.exit, (ctx) => {
  ctx.reply(MESSAGES.exit, Markup.removeKeyboard());
  ctx.scene.leave();
});

// --- –°—Ü–µ–Ω–∞—Ä–∏–π "–ü—Ä–∏–º–µ—Ä —Ä–µ–∑—é–º–µ –∏–∑ –±–∞–∑—ã" ---
export const exampleScene = new Scenes.WizardScene<BotContext>(
  "exampleScene",
  // –®–∞–≥ 1: –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –∫–Ω–æ–ø–∫–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (mainMenu)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    (ctx.session as any).orderType = "example";
    (ctx.session as any).orderId = generateOrderId();
    (ctx.session as any).upsell = false;
    (ctx.session as any).userId = ctx.from?.id;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders[(ctx.session as any).orderId] = {
      id: (ctx.session as any).orderId,
      userId: ctx.from?.id!,
      username: ctx.from?.username,
      type: "example",
      status: "pending",
      price: 0,
      createdAt: new Date(),
      delivery: "telegram",
    } as Order;
    console.log(`[ORDER] –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ${(ctx.session as any).orderId}, user: ${ctx.from?.id}, —É—Å–ª—É–≥–∞: example`);
    await ctx.reply(
      MESSAGES.exampleResume.description,
      { ...Markup.keyboard([
        ["‚úÖ –î–∞, —è —Ö–æ—á—É –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"],
        [MESSAGES.buttons.editMainMenu],
      ]).resize(), parse_mode: 'HTML' }
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === "‚úÖ –î–∞, —è —Ö–æ—á—É –ü—Ä–∏–º–µ—Ä –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"
    ) {
      await ctx.reply(
        MESSAGES.exampleResume.requestPosition,
        { ...Markup.keyboard([[MESSAGES.buttons.editMainMenu]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    } else if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.editMainMenu
    ) {
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    } else {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", { parse_mode: 'HTML' });
    }
  },
  // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text !== MESSAGES.buttons.editMainMenu
    ) {
      if (isEmptyText(ctx.message.text)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.", { parse_mode: 'HTML' });
        return;
      }
      if (isTooLongText(ctx.message.text)) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).position = ctx.message.text.trim();
      await ctx.reply(
        MESSAGES.exampleResume.deliveryChoice,
        { ...Markup.keyboard([
          [MESSAGES.buttons.telegramDelivery],
          [MESSAGES.buttons.emailDelivery],
          [MESSAGES.buttons.back],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    } else if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.editMainMenu
    ) {
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
    } else {
      await ctx.reply(MESSAGES.common.enterPosition, { parse_mode: 'HTML' });
    }
  },
  // –®–∞–≥ 4: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text === MESSAGES.buttons.telegramDelivery) {
        (ctx.session as any).delivery = "telegram";
        (ctx.session as any).email = undefined;
        orders[(ctx.session as any).orderId].delivery = "telegram";
        orders[(ctx.session as any).orderId].email = undefined;
      } else if (ctx.message.text === MESSAGES.buttons.emailDelivery) {
        (ctx.session as any).delivery = "email";
        orders[(ctx.session as any).orderId].delivery = "email";
        await ctx.reply(MESSAGES.exampleResume.enterEmail, { parse_mode: 'HTML' });
        return; // –Ω–µ next, –∂–¥–µ–º email
      } else if (ctx.message.text === MESSAGES.buttons.back) {
        await ctx.scene.reenter();
        return;
      } else if (isValidEmail(ctx.message.text)) {
        (ctx.session as any).delivery = "email";
        (ctx.session as any).email = ctx.message.text.trim();
        orders[(ctx.session as any).orderId].delivery = "email";
        orders[(ctx.session as any).orderId].email = ctx.message.text.trim();
      } else {
        await ctx.reply(MESSAGES.exampleResume.invalidEmail, { parse_mode: 'HTML' });
        return;
      }
      // upsell
      await ctx.reply(
        MESSAGES.exampleResume.upsell(),
        { ...Markup.keyboard([
          [MESSAGES.buttons.addVideoAdvice()],
          [MESSAGES.buttons.onlyExample],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
  },
  // –®–∞–≥ 5: Upsell
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text.startsWith("üëç")) {
        (ctx.session as any).upsell = true;
      } else {
        (ctx.session as any).upsell = false;
      }
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      let price = (ctx.session as any).upsell
        ? PRICE_EXAMPLE + PRICE_UPSELL_VIDEO
        : PRICE_EXAMPLE;
      if (isNaN(price)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ example –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
          PRICE_EXAMPLE,
          PRICE_UPSELL_VIDEO,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).price = price;
      await ctx.reply(
        MESSAGES.exampleResume.orderSummary(
          (ctx.session as any).position,
          (ctx.session as any).delivery,
          (ctx.session as any).email || "",
          (ctx.session as any).upsell,
          price,
        ),
        { ...Markup.keyboard([
          [MESSAGES.buttons.confirm],
          [MESSAGES.buttons.editOrder],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
  },
  // –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text === MESSAGES.buttons.confirm) {
        await ctx.reply(
          MESSAGES.exampleResume.paymentInstructions(
            (ctx.session as any).price,
          ),
          { ...Markup.keyboard([[MESSAGES.buttons.attachReceipt]]).resize(), parse_mode: 'HTML' }
        );
        return ctx.wizard.next();
      } else if (ctx.message.text === MESSAGES.buttons.editOrder) {
        await ctx.scene.reenter();
      } else {
        await ctx.reply(MESSAGES.common.confirmOrder, { parse_mode: 'HTML' });
      }
    }
  },
  // –®–∞–≥ 7: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (exampleScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message && ctx.message.text === MESSAGES.buttons.editMainMenu) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞–∂–∞–ª '–≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ—Å–ª–µ orderAccepted (exampleScene)`);
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.attachReceipt
    ) {
      await ctx.reply(MESSAGES.exampleResume.attachReceipt, { parse_mode: 'HTML' });
      return;
    }
    if (ctx.message && "photo" in ctx.message) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      if (isFileTooLarge(photo.file_size || 0, 50)) {
        await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 50 –ú–ë.", { parse_mode: 'HTML' });
        return;
      }
      (ctx.session as any).receiptFileId = photo.file_id;
      await ctx.reply(
        MESSAGES.exampleResume.orderAccepted((ctx.session as any).orderId),
        { ...Markup.keyboard([[MESSAGES.buttons.editMainMenu]]).resize(), parse_mode: 'HTML' },
      );
      const adminMsg = MESSAGES.exampleResume.adminNotification(
        (ctx.session as any).orderId,
        ctx.from?.first_name || "",
        ctx.from?.username || "",
        (ctx.session as any).userId,
        (ctx.session as any).position,
        (ctx.session as any).delivery,
        (ctx.session as any).email || "",
        (ctx.session as any).upsell,
        (ctx.session as any).price,
      );
      await ctx.telegram.sendPhoto(ADMIN_CHAT_ID, photo.file_id, {
        caption: adminMsg,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
                callback_data: `send_result_${(ctx.session as any).orderId}_${(ctx.session as any).userId}`,
              },
            ],
          ],
        },
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∞–¥–º–∏–Ω—É
      if ((ctx.session as any).fileId) {
        await ctx.telegram.sendDocument(
          ADMIN_CHAT_ID,
          (ctx.session as any).fileId,
          {
            caption: `–§–∞–π–ª —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(ctx.session as any).fileName}`,
          },
        );
      }
      await sendAdminEmail(
        `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${(ctx.session as any).orderId}`,
        adminMsg,
      );
      return ctx.scene.leave();
    } else if (ctx.message && "document" in ctx.message) {
      if (
        ctx.message.document &&
        isValidImageFile(ctx.message.document.file_name || "")
      ) {
        if (isFileTooLarge(ctx.message.document.file_size || 0, 20)) {
          await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.", { parse_mode: 'HTML' });
          return;
        }
        (ctx.session as any).receiptFileId = ctx.message.document.file_id;
        await ctx.reply(
          MESSAGES.exampleResume.orderAccepted((ctx.session as any).orderId),
          { ...Markup.keyboard([[MESSAGES.buttons.editMainMenu]]).resize(), parse_mode: 'HTML' },
        );
        const adminMsg = MESSAGES.exampleResume.adminNotification(
          (ctx.session as any).orderId,
          ctx.from?.first_name || "",
          ctx.from?.username || "",
          (ctx.session as any).userId,
          (ctx.session as any).position,
          (ctx.session as any).delivery,
          (ctx.session as any).email || "",
          (ctx.session as any).upsell,
          (ctx.session as any).price,
        );
        await ctx.telegram.sendDocument(
          ADMIN_CHAT_ID,
          ctx.message.document.file_id,
          {
            caption: adminMsg,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
                    callback_data: `send_result_${(ctx.session as any).orderId}_${(ctx.session as any).userId}`,
                  },
                ],
              ],
            },
          },
        );
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∞–¥–º–∏–Ω—É
        if ((ctx.session as any).fileId) {
          await ctx.telegram.sendDocument(
            ADMIN_CHAT_ID,
            (ctx.session as any).fileId,
            {
              caption: `–§–∞–π–ª —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(ctx.session as any).fileName}`,
            },
          );
        }
        await sendAdminEmail(
          `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${(ctx.session as any).orderId}`,
          adminMsg,
        );
        return ctx.scene.leave();
      } else {
        await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ (jpg, jpeg, png).",
          { parse_mode: 'HTML' }
        );
      }
    } else {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ (jpg, jpeg, png).",
        { parse_mode: 'HTML' }
      );
    }
  },
);

// --- –°—Ü–µ–Ω–∞—Ä–∏–π "–†–∞–∑–±–æ—Ä-–ø—Ä–æ–∂–∞—Ä–∫–∞ —Ä–µ–∑—é–º–µ" ---
export const reviewScene = new Scenes.WizardScene<BotContext>(
  "reviewScene",
  // –®–∞–≥ 1: –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text.startsWith("/")
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    (ctx.session as any).orderType = "review";
    (ctx.session as any).orderId = generateOrderId();
    (ctx.session as any).upsell = false;
    (ctx.session as any).userId = ctx.from?.id;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders[(ctx.session as any).orderId] = {
      id: (ctx.session as any).orderId,
      userId: ctx.from?.id!,
      username: ctx.from?.username,
      type: "review",
      status: "pending",
      price: 0,
      createdAt: new Date(),
      delivery: "telegram",
    } as Order;
    await ctx.reply(
      MESSAGES.reviewResume.description,
      { ...Markup.keyboard([
        [MESSAGES.buttons.startReview],
        [MESSAGES.buttons.backToMenu],
      ]).resize(), parse_mode: 'HTML' }
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text.startsWith("/")
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.backToMenu
    ) {
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.startReview
    ) {
      await ctx.reply(MESSAGES.reviewResume.attachFile, { parse_mode: 'HTML' });
      return;
    }
    if (ctx.message && "document" in ctx.message) {
      const fileName = ctx.message.document.file_name || "";
      if (!isValidResumeFile(fileName)) {
        await ctx.reply(MESSAGES.reviewResume.invalidFile, { parse_mode: 'HTML' });
        return;
      }
      if (
        ctx.message.document.file_size &&
        ctx.message.document.file_size > 20 * 1024 * 1024
      ) {
        await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.", { parse_mode: 'HTML' });
        return;
      }
      (ctx.session as any).fileId = ctx.message.document.file_id;
      (ctx.session as any).fileName = fileName;
      await ctx.reply(
        MESSAGES.reviewResume.enterPosition,
        Markup.removeKeyboard(),
      );
      return ctx.wizard.next();
    }
    if (ctx.message && "photo" in ctx.message) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .doc, .docx –∏–ª–∏ .pdf, –∞ –Ω–µ —Ñ–æ—Ç–æ.",
        { parse_mode: 'HTML' }
      );
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (!ctx.message.text.trim()) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ.", { parse_mode: 'HTML' });
        return;
      }
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ.", { parse_mode: 'HTML' });
      return;
    }
    await ctx.reply(MESSAGES.common.attachFile, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 3: –°–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (3 –≤–æ–ø—Ä–æ—Å–∞)
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text.startsWith("/")
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.skip
    ) {
      (ctx.session as any).position = MESSAGES.common.no;
      await ctx.reply(
        MESSAGES.reviewResume.enterVacancy,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    if (ctx.message && "text" in ctx.message) {
      if (!ctx.message.text.trim()) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å.", { parse_mode: 'HTML' });
        return;
      }
      if (ctx.message.text.length > 4096) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).position = ctx.message.text.trim();
      await ctx.reply(
        MESSAGES.reviewResume.enterVacancy,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterPositionPrompt, { parse_mode: 'HTML' });
  },
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text.startsWith("/")
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.skip
    ) {
      (ctx.session as any).vacancyUrl = MESSAGES.common.no;
      await ctx.reply(
        MESSAGES.reviewResume.enterComment,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text.length > 4096) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).vacancyUrl = ctx.message.text.trim();
      await ctx.reply(
        MESSAGES.reviewResume.enterComment,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterVacancy, { parse_mode: 'HTML' });
  },
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text.startsWith("/")
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.skip
    ) {
      (ctx.session as any).comment = MESSAGES.common.no;
      // upsell
      await ctx.reply(
        MESSAGES.reviewResume.upsell(),
        { ...Markup.keyboard([
          [MESSAGES.buttons.addExamples()],
          [MESSAGES.buttons.onlyReview],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text.length > 4096) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).comment = ctx.message.text.trim();
      // upsell
      await ctx.reply(
        MESSAGES.reviewResume.upsell(),
        { ...Markup.keyboard([
          [MESSAGES.buttons.addExamples()],
          [MESSAGES.buttons.onlyReview],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterComment, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 4: Upsell
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text.startsWith("üëç")) {
        (ctx.session as any).upsell = true;
      } else {
        (ctx.session as any).upsell = false;
      }
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      let price = (ctx.session as any).upsell
        ? PRICE_REVIEW + PRICE_UPSELL_EXAMPLES
        : PRICE_REVIEW;
      if (isNaN(price)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ review –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
          PRICE_REVIEW,
          PRICE_UPSELL_EXAMPLES,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).price = price;
      await ctx.reply(
        MESSAGES.reviewResume.orderSummary(
          (ctx.session as any).fileName,
          (ctx.session as any).position,
          (ctx.session as any).upsell,
          price,
        ),
        { ...Markup.keyboard([
          [MESSAGES.buttons.confirmPayment],
          [MESSAGES.buttons.startOver],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
  },
  // –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text === MESSAGES.buttons.confirmPayment) {
        await ctx.reply(
          MESSAGES.exampleResume.paymentInstructions(
            (ctx.session as any).price,
          ),
          { ...Markup.keyboard([[MESSAGES.buttons.attachReceipt]]).resize(), parse_mode: 'HTML' }
        );
        return ctx.wizard.next();
      } else if (ctx.message.text === MESSAGES.buttons.startOver) {
        await ctx.scene.reenter();
      } else {
        await ctx.reply(MESSAGES.common.confirmOrderOrRestart, { parse_mode: 'HTML' });
      }
    }
  },
  // –®–∞–≥ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (reviewScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message && ctx.message.text === MESSAGES.buttons.editMainMenu) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞–∂–∞–ª '–≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ—Å–ª–µ orderAccepted (reviewScene)`);
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.attachReceipt
    ) {
      await ctx.reply(MESSAGES.exampleResume.attachReceipt, { parse_mode: 'HTML' });
      return;
    }
    if (ctx.message && "photo" in ctx.message) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      (ctx.session as any).receiptFileId = photo.file_id;
      await ctx.reply(
        MESSAGES.reviewResume.orderAccepted((ctx.session as any).orderId),
        { ...Markup.keyboard([[MESSAGES.buttons.editMainMenu]]).resize(), parse_mode: 'HTML' },
      );
      const adminMsg = MESSAGES.reviewResume.adminNotification(
        (ctx.session as any).orderId,
        ctx.from?.first_name || "",
        ctx.from?.username || "",
        (ctx.session as any).userId,
        (ctx.session as any).fileName,
        (ctx.session as any).position,
        (ctx.session as any).vacancyUrl,
        (ctx.session as any).comment,
        (ctx.session as any).upsell,
        (ctx.session as any).price,
      );
      await ctx.telegram.sendPhoto(ADMIN_CHAT_ID, photo.file_id, {
        caption: adminMsg,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
                callback_data: `send_result_${(ctx.session as any).orderId}_${(ctx.session as any).userId}`,
              },
            ],
          ],
        },
      });
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∞–¥–º–∏–Ω—É
      if ((ctx.session as any).fileId) {
        await ctx.telegram.sendDocument(
          ADMIN_CHAT_ID,
          (ctx.session as any).fileId,
          {
            caption: `–§–∞–π–ª —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(ctx.session as any).fileName}`,
          },
        );
      }
      await sendAdminEmail(
        `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${(ctx.session as any).orderId}`,
        adminMsg,
      );
      return ctx.scene.leave();
    } else if (ctx.message && "document" in ctx.message) {
      if (
        ctx.message.document &&
        isValidImageFile(ctx.message.document.file_name || "")
      ) {
        (ctx.session as any).receiptFileId = ctx.message.document.file_id;
        await ctx.reply(
          MESSAGES.reviewResume.orderAccepted((ctx.session as any).orderId),
          { ...Markup.keyboard([[MESSAGES.buttons.editMainMenu]]).resize(), parse_mode: 'HTML' },
        );
        const adminMsg = MESSAGES.reviewResume.adminNotification(
          (ctx.session as any).orderId,
          ctx.from?.first_name || "",
          ctx.from?.username || "",
          (ctx.session as any).userId,
          (ctx.session as any).fileName,
          (ctx.session as any).position,
          (ctx.session as any).vacancyUrl,
          (ctx.session as any).comment,
          (ctx.session as any).upsell,
          (ctx.session as any).price,
        );
        await ctx.telegram.sendDocument(
          ADMIN_CHAT_ID,
          ctx.message.document.file_id,
          {
            caption: adminMsg,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
                    callback_data: `send_result_${(ctx.session as any).orderId}_${(ctx.session as any).userId}`,
                  },
                ],
              ],
            },
          },
        );
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ –∞–¥–º–∏–Ω—É
        if ((ctx.session as any).fileId) {
          await ctx.telegram.sendDocument(
            ADMIN_CHAT_ID,
            (ctx.session as any).fileId,
            {
              caption: `–§–∞–π–ª —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(ctx.session as any).fileName}`,
            },
          );
        }
        await sendAdminEmail(
          `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${(ctx.session as any).orderId}`,
          adminMsg,
        );
        return ctx.scene.leave();
      } else {
        await ctx.reply(MESSAGES.common.attachReceipt, { parse_mode: 'HTML' });
      }
    } else {
      await ctx.reply(MESSAGES.common.attachReceipt, { parse_mode: 'HTML' });
    }
  },
);

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è wizard-—Å—Ü–µ–Ω (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –¥–∞–ª–µ–µ)
export const fullResumeScene = new Scenes.WizardScene<BotContext>(
  "fullResumeScene",
  // –®–∞–≥ 1: –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message && ctx.message.text === MESSAGES.buttons.backToMenu) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' (fullResumeScene)`);
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    (ctx.session as any).orderType = "full";
    (ctx.session as any).orderId = generateOrderId();
    (ctx.session as any).userId = ctx.from?.id;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders[(ctx.session as any).orderId] = {
      id: (ctx.session as any).orderId,
      userId: ctx.from?.id!,
      username: ctx.from?.username,
      type: "full",
      status: "pending",
      price: 0,
      createdAt: new Date(),
      delivery: "telegram",
    } as Order;
    await ctx.reply(
      MESSAGES.fullResume.description,
      { ...Markup.keyboard([
        [MESSAGES.buttons.selectTariff],
        [MESSAGES.buttons.backToMenu],
      ]).resize(), parse_mode: 'HTML' }
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏ –Ω–∞—á–∞—Ç—å'
  async (ctx) => {
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.selectTariff
    ) {
      await ctx.reply(
        MESSAGES.fullResume.tariffSelection,
        { ...Markup.keyboard([
          [MESSAGES.buttons.juniorTariff()],
          [MESSAGES.buttons.proTariff()],
          [MESSAGES.buttons.leadTariff()],
          [MESSAGES.buttons.back],
        ]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    if (ctx.message && "text" in ctx.message && ctx.message.text === MESSAGES.buttons.backToMenu) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' (fullResumeScene, —à–∞–≥ 2)`);
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
  },
  // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
  async (ctx) => {
    if (
      ctx.message &&
      typeof ctx.message === "object" &&
      "text" in ctx.message
    ) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ (fullResumeScene)`);
      let tariff = "";
      let price = 0;
      if (ctx.message.text === MESSAGES.buttons.juniorTariff()) {
        tariff = "junior";
        price = PRICE_FULL_JUNIOR;
      } else if (ctx.message.text === MESSAGES.buttons.proTariff()) {
        tariff = "pro";
        price = PRICE_FULL_PRO;
      } else if (ctx.message.text === MESSAGES.buttons.leadTariff()) {
        tariff = "lead";
        price = PRICE_FULL_LEAD;
      } else if (ctx.message.text === MESSAGES.buttons.back) {
        await ctx.scene.reenter();
        return;
      } else {
        console.log(
          "DEBUG: –Ω–µ —Å–æ–≤–ø–∞–ª–æ –Ω–∏ —Å –æ–¥–Ω–∏–º —Ç–∞—Ä–∏—Ñ–æ–º, —Ç–µ–∫—Å—Ç:",
          ctx.message.text,
        );
        await ctx.reply(MESSAGES.common.selectTariff, { parse_mode: 'HTML' });
        return;
      }
      console.log("DEBUG: –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ:", tariff, "—Ü–µ–Ω–∞:", price);
      if (isNaN(price)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
          tariff,
          price,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).tariff = tariff;
      (ctx.session as any).price = price;
      await ctx.reply(MESSAGES.fullResume.attachOldResume, { parse_mode: 'HTML' });
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.selectTariff, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 3: –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "document" in ctx.message) {
      if (isFileTooLarge(ctx.message.document.file_size || 0, 20)) {
        await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 20 –ú–ë.", { parse_mode: 'HTML' });
        return;
      }
      (ctx.session as any).oldResumeFileId = ctx.message.document.file_id;
      (ctx.session as any).oldResumeFileName = ctx.message.document.file_name;
      await ctx.reply(
        MESSAGES.fullResume.enterVacancy,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    } else if (ctx.message && "text" in ctx.message) {
      if (isCommand(ctx.message.text)) {
        console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
        await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
        await ctx.scene.leave();
        await ctx.scene.enter("mainMenu");
        return;
      }
      (ctx.session as any).oldResumeFileId = undefined;
      (ctx.session as any).oldResumeFileName = undefined;
      if (ctx.message.text === MESSAGES.buttons.skip) {
        (ctx.session as any).oldResumeFileId = undefined;
        (ctx.session as any).oldResumeFileName = undefined;
      }
      await ctx.reply(
        MESSAGES.fullResume.enterVacancy,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.fullResume.enterVacancy, { parse_mode: 'HTML' });
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text === MESSAGES.buttons.skip) {
        (ctx.session as any).vacancyUrl = MESSAGES.common.no;
        await ctx.reply(
          MESSAGES.fullResume.enterWishes,
          { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
        );
        return ctx.wizard.next();
      }
      if (isEmptyText(ctx.message.text)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.", { parse_mode: 'HTML' });
        return;
      }
      if (isTooLongText(ctx.message.text)) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).vacancyUrl = ctx.message.text.trim();
      await ctx.reply(
        MESSAGES.fullResume.enterWishes,
        { ...Markup.keyboard([[MESSAGES.buttons.skip]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterVacancyOrPosition, { parse_mode: 'HTML' });
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (ctx.message.text === MESSAGES.buttons.skip) {
        (ctx.session as any).comment = MESSAGES.common.no;
        // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
        console.log((ctx.session as any).price);
        const prepay = Math.floor((ctx.session as any).price / 2);
        if (isNaN(prepay)) {
          console.error(
            "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
            (ctx.session as any).price,
          );
          await ctx.reply(
            "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            { parse_mode: 'HTML' }
          );
          return;
        }
        await ctx.reply(
          MESSAGES.fullResume.prepaymentInfo(prepay),
          { ...Markup.keyboard([[MESSAGES.buttons.payPrepayment]]).resize(), parse_mode: 'HTML' }
        );
        return ctx.wizard.next();
      }
      if (isEmptyText(ctx.message.text)) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç".', { parse_mode: 'HTML' });
        return;
      }
      if (isTooLongText(ctx.message.text)) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).comment = ctx.message.text.trim();
      // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
      const prepay = Math.floor((ctx.session as any).price / 2);
      if (isNaN(prepay)) {
        console.error(
          "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
          (ctx.session as any).price,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      await ctx.reply(
        MESSAGES.fullResume.prepaymentInfo(prepay),
        { ...Markup.keyboard([[MESSAGES.buttons.payPrepayment]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterWishes, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 4: –û–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.payPrepayment
    ) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
      let price = (ctx.session as any).price;
      let tariff = (ctx.session as any).tariff;
      console.log(
        "DEBUG: tariff:",
        tariff,
        "price:",
        price,
        "upsell:",
        (ctx.session as any).upsell,
      );
      if (!tariff || !["junior", "pro", "lead"].includes(tariff)) {
        console.error("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", tariff);
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      if (typeof price !== "number" || isNaN(price)) {
        // –ü–µ—Ä–µ—Å—á—ë—Ç –¥–ª—è fullResumeScene
        if (tariff === "junior") price = PRICE_FULL_JUNIOR;
        else if (tariff === "pro") price = PRICE_FULL_PRO;
        else if (tariff === "lead") price = PRICE_FULL_LEAD;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (
          (ctx.session as any).upsell &&
          typeof PRICE_UPSELL_VIDEO === "number"
        ) {
          price += PRICE_UPSELL_VIDEO;
        }
      }
      if (typeof price !== "number" || isNaN(price)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á—ë—Ç–∞",
          tariff,
          price,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).price = price;
      const prepay = Math.floor(price / 2);
      if (isNaN(prepay)) {
        console.error("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ", price);
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      await ctx.reply(
        MESSAGES.fullResume.prepaymentInstructions(prepay),
        { ...Markup.keyboard([[MESSAGES.buttons.attachReceiptPrepay]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.payPrepayment, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.attachReceiptPrepay
    ) {
      await ctx.reply(MESSAGES.exampleResume.attachReceipt, { parse_mode: 'HTML' });
      return;
    }
    if (ctx.message && "photo" in ctx.message) {
      if (
        isFileTooLarge(
          ctx.message.photo[ctx.message.photo.length - 1].file_size || 0,
          50,
        )
      ) {
        await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 50 –ú–ë.", { parse_mode: 'HTML' });
        return;
      }
      (ctx.session as any).prepayReceiptFileId =
        ctx.message.photo[ctx.message.photo.length - 1].file_id;
      await ctx.reply(MESSAGES.fullResume.prepaymentReceived, { parse_mode: 'HTML' });
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.attachReceipt, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 6: –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (ctx.message && "text" in ctx.message) {
      if (isEmptyText(ctx.message.text)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é.", { parse_mode: 'HTML' });
        return;
      }
      if (isTooLongText(ctx.message.text)) {
        await ctx.reply(
          "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).interviewTime = ctx.message.text.trim();
      orders[(ctx.session as any).orderId].interviewTime =
        ctx.message.text.trim();
      require("./index").scheduleInterviewReminders(
        orders[(ctx.session as any).orderId],
        require("./index").bot,
      );
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –±—Ä–æ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
      const adminMsg = MESSAGES.fullResume.adminBookingNotification(
        (ctx.session as any).orderId,
        ctx.from?.first_name || "",
        ctx.from?.username || "",
        (ctx.session as any).userId,
        (ctx.session as any).tariff,
        (ctx.session as any).interviewTime,
        (ctx.session as any).oldResumeFileName,
        (ctx.session as any).vacancyUrl,
        (ctx.session as any).comment,
      );
      await ctx.telegram.sendMessage(ADMIN_CHAT_ID, adminMsg);
      await sendAdminEmail(
        `–ù–æ–≤–∞—è –±—Ä–æ–Ω—å ‚Ññ${(ctx.session as any).orderId}`,
        adminMsg,
      );
      await ctx.reply(MESSAGES.fullResume.remindersScheduled, { parse_mode: 'HTML' });
      await ctx.reply(MESSAGES.fullResume.paySecondPart, { parse_mode: 'HTML' });
      await ctx.reply(
        MESSAGES.buttons.payFinal,
        { ...Markup.keyboard([[MESSAGES.buttons.payFinal]]).resize(), parse_mode: 'HTML' }
      );
      // –î–ª—è —Ç–µ—Å—Ç–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ setTimeout (–≤ –ø—Ä–æ–¥–µ ‚Äî cron –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å)
      // setTimeout(() => { ... }, msTo24hBefore)
      // setTimeout(() => { ... }, msTo1hBefore)
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.enterInterviewTime, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.payFinal
    ) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      let price = (ctx.session as any).price;
      let tariff = (ctx.session as any).tariff;
      console.log(
        "DEBUG (final payment): tariff:",
        tariff,
        "price:",
        price,
        "upsell:",
        (ctx.session as any).upsell,
      );
      if (!tariff || !["junior", "pro", "lead"].includes(tariff)) {
        console.error("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (—Ñ–∏–Ω–∞–ª)", tariff);
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      if (typeof price !== "number" || isNaN(price)) {
        // –ü–µ—Ä–µ—Å—á—ë—Ç –¥–ª—è fullResumeScene
        if (tariff === "junior") price = PRICE_FULL_JUNIOR;
        else if (tariff === "pro") price = PRICE_FULL_PRO;
        else if (tariff === "lead") price = PRICE_FULL_LEAD;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (
          (ctx.session as any).upsell &&
          typeof PRICE_UPSELL_VIDEO === "number"
        ) {
          price += PRICE_UPSELL_VIDEO;
        }
      }
      if (typeof price !== "number" || isNaN(price)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (—Ñ–∏–Ω–∞–ª)",
          tariff,
          price,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      (ctx.session as any).price = price;
      const rest = Math.ceil(price / 2);
      if (isNaN(rest)) {
        console.error(
          "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ",
          price,
        );
        await ctx.reply(
          "–û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
          { parse_mode: 'HTML' }
        );
        return;
      }
      await ctx.reply(
        MESSAGES.fullResume.finalPaymentInstructions(rest),
        { ...Markup.keyboard([[MESSAGES.buttons.attachReceiptFinal]]).resize(), parse_mode: 'HTML' }
      );
      return ctx.wizard.next();
    }
    await ctx.reply(MESSAGES.common.paySecondPart, { parse_mode: 'HTML' });
  },
  // –®–∞–≥ 8: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
  async (ctx) => {
    if (ctx.message && "text" in ctx.message && isCommand(ctx.message.text)) {
      console.log(`[SCENE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (fullResumeScene)`);
      await ctx.reply("–í—ã –Ω–∞—á–∞–ª–∏ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { parse_mode: 'HTML' });
      await ctx.scene.leave();
      await ctx.scene.enter("mainMenu");
      return;
    }
    if (
      ctx.message &&
      "text" in ctx.message &&
      ctx.message.text === MESSAGES.buttons.attachReceiptFinal
    ) {
      await ctx.reply(MESSAGES.exampleResume.attachReceipt, { parse_mode: 'HTML' });
      return;
    }
    if (ctx.message && "photo" in ctx.message) {
      if (
        isFileTooLarge(
          ctx.message.photo[ctx.message.photo.length - 1].file_size || 0,
          50,
        )
      ) {
        await ctx.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 50 –ú–ë.", { parse_mode: 'HTML' });
        return;
      }
      (ctx.session as any).finalReceiptFileId =
        ctx.message.photo[ctx.message.photo.length - 1].file_id;
      await ctx.reply(
        MESSAGES.fullResume.orderCompleted,
        Markup.removeKeyboard(),
      );
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–µ
      const adminMsg = MESSAGES.fullResume.adminPaymentNotification(
        (ctx.session as any).orderId,
        ctx.from?.first_name || "",
        ctx.from?.username || "",
        (ctx.session as any).userId,
        (ctx.session as any).tariff,
      );
      await ctx.telegram.sendPhoto(
        ADMIN_CHAT_ID,
        (ctx.session as any).finalReceiptFileId,
        {
          caption: adminMsg,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª",
                  callback_data: `send_result_${(ctx.session as any).orderId}_${(ctx.session as any).userId}`,
                },
              ],
            ],
          },
        },
      );
      await sendAdminEmail(
        `–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ‚Ññ${(ctx.session as any).orderId}`,
        adminMsg,
      );
      return ctx.scene.leave();
    }
    await ctx.reply(MESSAGES.common.attachReceipt, { parse_mode: 'HTML' });
  },
);

export {};
