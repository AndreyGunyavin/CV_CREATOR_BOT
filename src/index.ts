import { config } from 'dotenv';
config();

import { Telegraf, session, Scenes, Markup } from 'telegraf';
import { ADMIN_CHAT_ID } from './constants';
import { generateOrderId } from './utils';
import { mainMenuScene, exampleScene, reviewScene, fullResumeScene } from './scenes';
import { BotContext } from './bot.context';
import { sendAdminEmail, sendClientEmail } from './email';
import { Order } from './types';
import axios from 'axios';
import express, { Request, Response } from 'express';

export const orders: Record<string, Order> = {};

const bot = new Telegraf<BotContext>(process.env.BOT_TOKEN!);

const stage = new Scenes.Stage<BotContext>();
stage.register(mainMenuScene, exampleScene, reviewScene, fullResumeScene);
bot.use(session());
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return Markup.keyboard([
    ['üìÑ –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ'],
  ]).resize();
}

bot.start((ctx) => {
  console.log("STARTED: ", ctx.from.username);
  ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–µ–∑—é–º–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    getMainMenu()
  );
});

bot.hears('üìÑ –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—é–º–µ', (ctx) => ctx.scene.enter('mainMenu'));

// TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

// --- –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –∞–Ω–æ–Ω–∏–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É ---
interface PendingAdminAction {
  orderId: string;
  userId: number;
  realUserId: number;
}
const pendingAdminActions = new Map<number, PendingAdminAction>();

bot.on('callback_query', async (ctx) => {
  const callbackQuery = ctx.callbackQuery as any;
  const data = callbackQuery?.data;
  if (!data) return;
  if (data.startsWith('send_result_')) {
    // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (ctx.from?.id?.toString() !== ADMIN_CHAT_ID) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }
    // –ü–∞—Ä—Å–∏–º orderId –∏ userId –∏–∑ callback_data
    const match = data.match(/^send_result_(.+)_(\d+)$/);
    if (!match) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ userId –∫–ª–∏–µ–Ω—Ç–∞:');
      pendingAdminActions.set(ctx.from.id, { orderId: '', userId: 0, realUserId: 0 });
      return;
    }
    const orderId = match[1];
    const userId = Number(match[2]);
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∏–¥–µ–æ) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.');
    pendingAdminActions.set(ctx.from.id, { orderId, userId, realUserId: userId });
  }
});

bot.on('message', async (ctx) => {
  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
  if (ctx.from?.id?.toString() === ADMIN_CHAT_ID && pendingAdminActions.has(ctx.from.id)) {
    const action = pendingAdminActions.get(ctx.from.id)!;
    // –ï—Å–ª–∏ –∂–¥–µ–º userId
    if (action.userId === 0 && ctx.message && 'text' in ctx.message && /^\d+$/.test(ctx.message.text)) {
      action.userId = Number(ctx.message.text);
      action.realUserId = action.userId;
      pendingAdminActions.set(ctx.from.id, action);
      await ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ä–µ–∑—é–º–µ –∏–ª–∏ –≤–∏–¥–µ–æ) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.');
      return;
    }
    // –ï—Å–ª–∏ –∂–¥–µ–º —Ñ–∞–π–ª
    if (action.userId > 0 && ctx.message && ('document' in ctx.message || 'video' in ctx.message)) {
      if ('document' in ctx.message) {
        await ctx.telegram.sendDocument(action.userId, ctx.message.document.file_id, {
          caption: `–í–∞—à —Ñ–∞–π–ª. ID –∑–∞–∫–∞–∑–∞: ${action.orderId}`
        });
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ email
        const order = findOrderByOrderId(action.orderId);
        console.log('[DEBUG] order –Ω–∞–π–¥–µ–Ω:', order);
        if (order && order.delivery === 'email' && order.email) {
          try {
            console.log('[DEBUG] –ì–æ—Ç–æ–≤–ª—é—Å—å –≤—ã–∑–≤–∞—Ç—å sendClientEmail –¥–ª—è —Ä–µ–∑—é–º–µ', order.email, ctx.message.document.file_name);
            const fileUrl = await ctx.telegram.getFileLink(ctx.message.document.file_id);
            const response = await axios.get(fileUrl.toString(), { responseType: 'arraybuffer' });
            await sendClientEmail(order.email, '–í–∞—à–µ —Ä–µ–∑—é–º–µ', '–í–∞—à–µ —Ä–µ–∑—é–º–µ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ!', [
              {
                filename: ctx.message.document.file_name,
                content: Buffer.from(response.data)
              }
            ]);
            console.log(`[EMAIL] –†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${order.email}`);
          } catch (e) {
            console.error(`[EMAIL ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ ${order.email}:`, e);
          }
        }
      } else if ('video' in ctx.message) {
        await ctx.telegram.sendVideo(action.userId, ctx.message.video.file_id, {
          caption: `–í–∞—à –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä. ID –∑–∞–∫–∞–∑–∞: ${action.orderId}`
        });
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ email
        const order = findOrderByOrderId(action.orderId);
        console.log('[DEBUG] order –Ω–∞–π–¥–µ–Ω:', order);
        if (order && order.delivery === 'email' && order.email) {
          try {
            console.log('[DEBUG] –ì–æ—Ç–æ–≤–ª—é—Å—å –≤—ã–∑–≤–∞—Ç—å sendClientEmail –¥–ª—è –≤–∏–¥–µ–æ', order.email);
            const fileUrl = await ctx.telegram.getFileLink(ctx.message.video.file_id);
            const response = await axios.get(fileUrl.toString(), { responseType: 'arraybuffer' });
            await sendClientEmail(order.email, '–í–∞—à –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä', '–í–∞—à –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ!', [
              {
                filename: 'video.mp4',
                content: Buffer.from(response.data)
              }
            ]);
            console.log(`[EMAIL] –í–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${order.email}`);
          } catch (e) {
            console.error(`[EMAIL ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä –Ω–∞ ${order.email}:`, e);
          }
        }
      }
      await ctx.reply('–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.');
      action.userId = -1; // –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç
      pendingAdminActions.set(ctx.from.id, action);
      return;
    }
    // –ï—Å–ª–∏ –∂–¥–µ–º —Ç–µ–∫—Å—Ç
    if (action.userId === -1 && ctx.message && 'text' in ctx.message) {
      await ctx.telegram.sendMessage(action.realUserId, ctx.message.text + '\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ 48 —á–∞—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª —Å–µ–±–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.');
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ email, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ email
      const order = findOrderByOrderId(action.orderId);
      if (order && order.delivery === 'email' && order.email) {
        await sendClientEmail(order.email, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É', ctx.message.text + '\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ 48 —á–∞—Å–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª —Å–µ–±–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.');
      }
      await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.');
      pendingAdminActions.delete(ctx.from.id);
      return;
    }
  }
});

bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –í –∫–∞–∂–¥–æ–º wizard-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ orderId –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:
// orders[orderId] = { ... };

function findOrderByOrderId(orderId: string): Order | undefined {
  return orders[orderId];
}

function scheduleInterviewReminders(order: Order, botInstance: typeof bot) {
  if (!order.interviewTime || !order.userId) return;
  const interviewDate = new Date(order.interviewTime);
  const now = new Date();
  const msTo24h = interviewDate.getTime() - now.getTime() - 24 * 60 * 60 * 1000;
  const msTo1h = interviewDate.getTime() - now.getTime() - 1 * 60 * 60 * 1000;
  if (msTo24h > 0) {
    setTimeout(() => {
      if (!order.interviewReminded24h) {
        botInstance.telegram.sendMessage(order.userId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ ${order.interviewTime} (—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞).`);
        botInstance.telegram.sendMessage(ADMIN_CHAT_ID, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º @${order.username} (${order.userId}) —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ (${order.interviewTime}).`);
        order.interviewReminded24h = true;
      }
    }, msTo24h);
  }
  if (msTo1h > 0) {
    setTimeout(() => {
      if (!order.interviewReminded1h) {
        botInstance.telegram.sendMessage(order.userId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å (${order.interviewTime}).`);
        botInstance.telegram.sendMessage(ADMIN_CHAT_ID, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º @${order.username} (${order.userId}) —á–µ—Ä–µ–∑ 1 —á–∞—Å (${order.interviewTime}).`);
        order.interviewReminded1h = true;
      }
    }, msTo1h);
  }
}

const app = express();
app.use(express.json());

app.post('/calendly-webhook', (req: Request, res: Response) => {
  const { email, name, event_time } = req.body;
  const order = Object.values(orders).find(o => o.email === email || o.username === name);
  if (order) {
    order.interviewTime = event_time;
    scheduleInterviewReminders(order, bot);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω—É
    if (order.userId) {
      bot.telegram.sendMessage(order.userId, `–í–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞ ${event_time}. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
    }
    bot.telegram.sendMessage(ADMIN_CHAT_ID, `–ö–ª–∏–µ–Ω—Ç @${order.username} (${order.userId}) –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ ${event_time} (–∑–∞–∫–∞–∑ ‚Ññ${order.id}).`);
    res.status(200).send('ok');
  } else {
    res.status(404).send('order not found');
  }
});

app.listen(3001, () => {
  console.log('Calendly webhook listening on port 3001');
});

export { scheduleInterviewReminders, bot }; 
